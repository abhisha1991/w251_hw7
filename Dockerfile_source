# This builds the tensorrt lab file docker file  - taken from here: https://github.com/MIDS-scaling-up/v2/blob/master/week05/labs/docker/Dockerfile.tensorrtlab05
# docker build -t tensorrtlab05 -f Dockerfile.tensorrtlab05 .
# docker run --privileged --rm -p 8888:8888 -d tensorrtlab05

FROM w251/keras:dev-tx2-4.3_b132-tf1
USER root

RUN apt update && apt install python3-matplotlib python3-pil wget -y
RUN apt install git pkg-config build-essential cmake unzip mosquitto-clients -y

###### Install Open CV for video capture
ARG URL=http://169.44.201.108:7002/jetpacks/4.3
WORKDIR /tmp
# RUN rm *.deb

RUN curl $URL/libopencv_3.3.1-2-g31ccdfe11_arm64.deb  -so libopencv_3.3.1-2-g31ccdfe11_arm64.deb
RUN curl $URL/libopencv-dev_3.3.1-2-g31ccdfe11_arm64.deb -so libopencv-dev_3.3.1-2-g31ccdfe11_arm64.deb
RUN curl $URL/libopencv-python_3.3.1-2-g31ccdfe11_arm64.deb -so libopencv-python_3.3.1-2-g31ccdfe11_arm64.deb

RUN apt remove -y libopencv-calib3d-dev libopencv-core-dev 

RUN apt install -y  libtbb-dev libavcodec-dev libavformat-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgtk2.0-dev
RUN apt install -y libswscale-dev libv4l-dev
RUN dpkg -i *.deb

RUN apt install -y libcanberra-gtk-module libcanberra-gtk3-module libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev 

# Install Darknet and Yolo
WORKDIR /
RUN git clone https://github.com/pjreddie/darknet.git
WORKDIR /darknet

# Fix Makefile, make, and fix .cfg files
RUN sed -i "s/^GPU=0/GPU=1/g" Makefile && sed -i "s/^CUDNN=0/CUDNN=1/g" Makefile && sed -i "s/^OPENCV=0/OPENCV=1/g" Makefile
ENV PATH $PATH:/usr/local/cuda-10.0/bin
RUN ldconfig
RUN make -j6
RUN sed -i "s/^batch=64/batch=1/g" /darknet/cfg/yolov3.cfg && sed -i "s/^subdivisions=16/subdivisions=1/g" /darknet/cfg/yolov3.cfg 
RUN rm -f /tmp/*.deb

WORKDIR /tmp
VOLUME /tmp
COPY . /tmp

###### install the c++ version of protobuf ####
RUN pip3 uninstall -y protobuf
RUN pip3 install cython

RUN mkdir /protobuf
WORKDIR /protobuf
RUN git clone -b '3.6.x' https://github.com/google/protobuf.git . && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local 

RUN make -j6 && make install
RUN ldconfig

WORKDIR /protobuf/python
RUN python3 setup.py build --cpp_implementation
RUN python3 setup.py install --cpp_implementation
RUN pip3 install matplotlib
RUN pip3 install paho-mqtt
RUN pip3 install requests
RUN pip3 install Pillow
RUN pip3 install wget
RUN rm -fr /protobuf
WORKDIR /notebooks

###### Install Tensor flow RT
RUN git clone --recursive https://github.com/NVIDIA-Jetson/tf_trt_models.git
WORKDIR tf_trt_models
RUN ./install.sh python3

# Maximize perf
#WORKDIR /
#CMD nvpmodel -m 0
#CMD ./jetson_clocks.sh

